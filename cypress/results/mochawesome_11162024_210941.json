{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-17T00:09:35.624Z",
    "end": "2024-11-17T00:09:41.982Z",
    "duration": 6358,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "19eb798d-bb27-42ac-a5e2-823c98ba1af9",
      "title": "",
      "fullFile": "cypress\\e2e\\jokerapi.cy.js",
      "file": "cypress\\e2e\\jokerapi.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "419f3d1a-51e0-4c8b-a387-0a525174dedc",
          "title": "Validando atributos da API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validando a API está retornando todos os atributos",
              "fullTitle": "Validando atributos da API Validando a API está retornando todos os atributos",
              "timedOut": null,
              "duration": 1172,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(endpoint).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('type');\n  expect(response.body).to.have.property('setup');\n  expect(response.body).to.have.property('punchline');\n  expect(response.body).to.have.property('id');\n});",
              "err": {},
              "uuid": "4a5ce089-3cbe-4687-9963-9da8da76ce6c",
              "parentUUID": "419f3d1a-51e0-4c8b-a387-0a525174dedc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validando se a API retorna um corpo no formato JSON válido",
              "fullTitle": "Validando atributos da API Validando se a API retorna um corpo no formato JSON válido",
              "timedOut": null,
              "duration": 995,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(endpoint).then(resposta => {\n  expect(resposta.headers['content-type']).to.include('application/json');\n  expect(() => JSON.parse(JSON.stringify(resposta.body))).not.to.throw();\n});",
              "err": {},
              "uuid": "af86d99e-a108-44d1-b282-895305993965",
              "parentUUID": "419f3d1a-51e0-4c8b-a387-0a525174dedc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validando se a API está retornando IDs únicos, se os atributos não estão vindo vazios e se as piadas são diferentes em 100 requisições",
              "fullTitle": "Validando atributos da API Validando se a API está retornando IDs únicos, se os atributos não estão vindo vazios e se as piadas são diferentes em 100 requisições",
              "timedOut": null,
              "duration": 4125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let idList = [];\nlet typeList = [];\nlet setupList = [];\nlet punchlineList = [];\nfor (Range = 0; Range < 5; Range++) {\n  cy.request(endpoint).then(response => {\n    expect(idList).not.to.include(response.body.id);\n    expect(setupList).not.to.include(response.body.setup);\n    expect(punchlineList).not.to.include(response.body.punchline);\n    idList.push(response.body.id);\n    typeList.push(response.body.type);\n    setupList.push(response.body.setup);\n    punchlineList.push(response.body.punchline);\n    expect(response.body.type).to.not.be.empty;\n    expect(response.body.setup).to.not.be.empty;\n    expect(response.body.punchline).to.not.be.empty;\n    expect(response.body.id).to.be.a('number');\n  });\n}",
              "err": {},
              "uuid": "a8e2a8a7-ceff-4034-af07-4ee2efda178f",
              "parentUUID": "419f3d1a-51e0-4c8b-a387-0a525174dedc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a5ce089-3cbe-4687-9963-9da8da76ce6c",
            "af86d99e-a108-44d1-b282-895305993965",
            "a8e2a8a7-ceff-4034-af07-4ee2efda178f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6292,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": true,
        "json": true,
        "timestamp": "mmddyyyy_HHMMss"
      },
      "version": "6.2.0"
    }
  }
}